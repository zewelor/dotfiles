#!/bin/zsh

# Exit immediately if a command exits with a non-zero status,
# if using an undefined variable, or if any command in a pipeline fails
set -euo pipefail

# Function to handle errors
trap 'echo "Error occurred at line $LINENO. Exiting." >&2; exit 1' ERR

# Determine the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${(%):-%x}")" && pwd)"
BASE="$SCRIPT_DIR"


has() { type "${1:?too few arguments}" &>/dev/null   }

# Function to install symlinks using stow
install_with_stow() {
  local stow_opts=("$@")

  echo "Running stow with: ${stow_opts[*]}"

  # Perform a dry run first
  if ! stow -v "${stow_opts[@]}" -n; then
    echo "Error: Stow dry run failed with options: ${stow_opts[*]}" >&2
    exit 1
  fi

  # Prompt the user to apply changes
  read -r "?Do you want to apply the changes? [y/N] " response
  case "$response" in
    [Yy])
      echo "Applying changes..."
      stow -v "${stow_opts[@]}"
      ;;
    *)
      echo "Changes were not applied."
      ;;
  esac
}

# Function to add secret environment variables from Vault
add_secret_envs_from_vault() {
  read -r "?Would you like to add secret envs from Vault? [y/N] " response
  if [[ "$response" =~ ^[Yy]$ ]]; then
    read -rs -p "Please provide your Vault token: " VAULT_TOKEN
    echo

    # Ensure the target directory exists
    mkdir -p ~/.zshrc.d

    # Define an array of keys to fetch from Vault
    local keys=("envs.zsh") # Add more keys as needed

    for key in "${keys[@]}"; do
      echo "Fetching data for key: $key"
      local response
      response=$(curl -sf -H "X-Vault-Token: $VAULT_TOKEN" \
        -X GET "https://vault.8567153.xyz/v1/shell_envs/data/$key") || {
        echo "Failed to fetch data for $key from Vault." >&2
        continue
      }

      # Process and save environment variables
      echo "$response" | jq -r ".data.data | to_entries[] | \"export \(.key)=\(.value)\"" > "~/.zshrc.d/$key"
      echo "Environment variables for $key have been saved to ~/.zshrc.d/$key"
    done
  else
    echo "Skipped adding secret environment variables from Vault."
  fi
}

# Install symlinks using stow
install_with_stow -t "$HOME" --ignore ".config/atuin/config.toml" "."
install_with_stow -t "$HOME" -d "prv" "."

# Setup Atuin if installed
if has "atuin"; then
  echo "Setting up Atuin configuration..."
  mkdir -p ~/.config/atuin/
  ln -sfn "$BASE/.config/atuin/config.toml" ~/.config/atuin/config.toml
fi

# Setup SSH configuration
echo "Ensuring SSH configuration directory exists..."
mkdir -p ~/.ssh/config.d/

# Setup Midnight Commander if installed
if has "mc"; then
  echo "Setting up Midnight Commander..."
  mkdir -p ~/.mc/
  curl -Ls https://raw.githubusercontent.com/peel/mc/master/solarized.ini -o ~/.mc/solarized.ini
fi

# Setup VIM if installed
if has "vim"; then
  echo "Setting up VIM..."
  mkdir -p ~/.vim/autoload ~/.vim/undo ~/.vim/swapfiles ~/.vim/backupfiles
  curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  vim +PlugInstall +qall
fi

# Add secret environment variables from Vault
add_secret_envs_from_vault

echo "Installation completed successfully."
